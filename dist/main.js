/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("const {\n  async\n} = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\nlet bestScore = 0;\nwindow.onload = function () {\n  // 1. Initializing game elements\n  const box = document.querySelector('.box');\n  const showScore = document.querySelector('.score');\n  const showBestScore = document.querySelector('.best_score');\n  const showMaxCombo = document.querySelector('.max_combo');\n  const showCombo = document.querySelector('.combo');\n  const timebox = document.querySelector('.time');\n  const HPbox = document.querySelector('.HP');\n\n  // Mine\n  const showIron = document.querySelector(\".iron\");\n  const showCopper = document.querySelector(\".copper\");\n  const showRuby = document.querySelector(\".ruby\");\n  const showBlackGem = document.querySelector(\".black_gem\");\n  const showSapphire = document.querySelector(\".sapphire\");\n  const showDiamond = document.querySelector(\".diamond\");\n  const showTreasure = document.querySelector(\".treasure\");\n  const startButton = document.querySelector('.start');\n  const pauseButton = document.querySelector('.pause');\n  const resumeButton = document.querySelector('resume');\n  const restartButton = document.querySelector('.restart');\n  const gameoverBox = document.querySelector('.gameover');\n  let timer = null;\n  let timeboxWidth = timebox.offsetWidth;\n  let HPboxWidth = HPbox.offsetWidth;\n  let currentScore = 0;\n  let maxCombo = 0;\n  let combo = 0;\n  showBestScore.innerHTML = bestScore;\n  let iron = 0;\n  let copper = 0;\n  let ruby = 0;\n  let blackGem = 0;\n  let sapphire = 0;\n  let diamond = 0;\n  let treasure = 0;\n\n  // ture => game has started; false => game is paused\n  let gameState = true;\n\n  // seven positions for moles to show up [{}{}{}{}{}{}{}]\n  let sevenMolesPos = [{\n    top: \"11%\",\n    left: \"5.5%\"\n  }, {\n    top: \"8%\",\n    left: \"24.5%\"\n  }, {\n    top: \"11%\",\n    left: \"44.5%\"\n  }, {\n    top: \"25.5%\",\n    left: \"26.5%\"\n  }, {\n    top: \"27%\",\n    left: \"50%\"\n  }, {\n    top: \"40%\",\n    left: \"8.5%\"\n  }, {\n    top: \"41%\",\n    left: \"42.5%\"\n  }];\n\n  // seven positions for snakes to show up\n  let sevenSnakePos = [{\n    top: \"6%\",\n    left: \"5.5%\"\n  }, {\n    top: \"2.4%\",\n    left: \"24.5%\"\n  }, {\n    top: \"6%\",\n    left: \"44.5%\"\n  }, {\n    top: \"20.5%\",\n    left: \"26.5%\"\n  }, {\n    top: \"21.5%\",\n    left: \"50.5%\"\n  }, {\n    top: \"34.2%\",\n    left: \"8.5%\"\n  }, {\n    top: \"36%\",\n    left: \"42.5%\"\n  }];\n\n  // previous hole index\n  let prevIndex = -1;\n  // timer for generating moles\n  let moleTimer = null;\n  // mole shows up animation timer\n  let upTimer = null;\n  // mole goes down \n  let downTimer = null;\n\n  // sound effect \n  let hasSound = true;\n  // background music\n  // let hasBGM = true;\n  // const BGM = new Audio(\"audio/BGM.mp3\");\n  // BGM.loop = true;\n  // BGM.play();\n\n  // 2. Start game after clicking the start button\n  startButton.onclick = function () {\n    // hide start button after clicked\n    this.style.display = 'None';\n    // show pause button\n    pauseButton.style.display = 'block';\n    // start timer\n    timeReduce();\n    // display mole\n    showMole();\n  };\n  // 3. Start game timer\n  function timeReduce() {\n    timer = setInterval(function () {\n      timeboxWidth--;\n      timebox.style.width = timeboxWidth + \"px\";\n      HPbox.style.width = HPboxWidth + \"px\";\n      if (currentScore >= bestScore) {\n        bestScore = currentScore;\n        showBestScore.innerHTML = bestScore;\n      }\n      if (timeboxWidth <= 0 || HPboxWidth <= 0) {\n        if (HPboxWidth <= 0) HPbox.style.width = 0 + 'px';\n        clearInterval(timer);\n        clearInterval(moleTimer);\n        clearInterval(downTimer);\n        // gamer over\n        gameover();\n      }\n    }, 300);\n  }\n\n  // 4. game over\n  function gameover() {\n    restartButton.style.display = \"block\";\n    gameoverBox.style.display = \"block\";\n\n    // while (box.firstChild){\n    // console.log(box.array)\n    // console.log(box.lastChild.nodeName)\n    // box.removeChild(box.firstChild);\n    // }\n    // console.log(box.hasChildNodes(\"IMG\"))\n\n    if (currentScore > bestScore) {\n      bestScore = currentScore;\n      showBestScore.innerHTML = bestScore;\n    }\n    // stop generaing any mole\n    clearInterval(moleTimer);\n    // stop hiding \n    // clearInterval(mole.out);\n    clearInterval(downTimer);\n    // clean all child node in box\n\n    // for (let i = box.children.length - 1; i > 0 ;i--) {\n    //   if (box.children[i].nodeName === 'IMG'){\n    //     // console.log(\".......................\")\n    //     // console.log(box.children)\n    //     // console.log('11111111111111111')\n    //     box.removeChild(box.children[i]);\n    //     // console.log(box.childNodes[i])\n    //     // console.log(box.children)\n    //   }\n    // }\n\n    // alert(\"Game over!\")\n    restart();\n  }\n  // 5. pause game\n  pauseButton.onclick = function () {\n    if (gameState) {\n      // pause game timer\n      clearInterval(timer);\n      // pause generating mole\n      clearInterval(moleTimer);\n      // pause button => continue button\n      this.style.backgroundImage = \"url(img/resume.png)\";\n      gameState = false;\n    } else {\n      // start timer\n      timeReduce();\n      showMole();\n      // start button => pause button\n      this.style.backgroundImage = \"url(img/pause.png)\";\n      gamestate = true;\n    }\n  };\n  // 6. generate mole\n  async function addMole() {\n    // create imge\n    let mole = document.createElement(\"img\");\n    // i. mole or snake\n    mole.who = '';\n    let randomNumber = Math.floor(Math.random() * 10);\n    if (randomNumber === 0) {\n      mole.who = 's';\n    } else if (randomNumber === 9) {\n      mole.who = 'f';\n    } else mole.who = 'm';\n\n    // ii. which hole\n    // generate a random index 0-7\n    mole.holeIndex = Math.floor(Math.random() * 7);\n    // ensure no repetitive hole position\n    while (mole.holeIndex === prevIndex) {\n      mole.holeIndex = Math.floor(Math.random() * 7);\n    }\n    prevIndex = mole.holeIndex;\n    // 7. holes locations\n    // assign hole pos to mole\n    if (mole.who === 'm' || mole.who === 'f') {\n      mole.style.top = sevenMolesPos[mole.holeIndex].top;\n      mole.style.left = sevenMolesPos[mole.holeIndex].left;\n    }\n    // assign hole pos to snake\n    else if (mole.who === 's') {\n      mole.style.top = sevenSnakePos[mole.holeIndex].top;\n      mole.style.left = sevenSnakePos[mole.holeIndex].left;\n    }\n    // add mole image\n    // mole.src=\"img/m1.png\"\n\n    // console.log(`${mole.who} is at hole ${mole.holeIndex}`)\n\n    box.appendChild(mole);\n    // console.log(box.children)\n\n    // showing up\n    let upIndex = 0;\n    upTimer = setInterval(function () {\n      if (mole.who === 'm' || mole.who === 'f') {\n        mole.src = \"img/\" + mole.who + upIndex + \".png\";\n        upIndex++;\n        if (mole.who === 'm' && upIndex > 1) {\n          setTimeout(function () {}, 80);\n          mole.mineIndex = Math.floor(Math.random() * 7);\n          mole.src = \"img/m1\" + mole.mineIndex + \".png\";\n          clearInterval(upTimer);\n        } else if (mole.who === 'f' && upIndex > 1) {\n          setTimeout(function () {}, 80);\n          mole.src = \"img/f2.png\";\n          clearInterval(upTimer);\n        }\n      } else {\n        mole.src = \"img/s\" + upIndex + \".png\";\n        upIndex++;\n        if (upIndex > 2) {\n          clearInterval(upTimer);\n        }\n      }\n    }, 100);\n\n    // Going down\n    let downIndex = 1;\n    if (mole.who === 'm') {\n      await whack(mole);\n      // let moel stays for 1 sec\n      mole.out = setTimeout(function () {\n        downTimer = setInterval(function () {\n          mole.src = \"img/m\" + downIndex + \".png\";\n          downIndex--;\n          if (downIndex < 0) {\n            clearInterval(downTimer);\n            clearInterval(mole.out);\n            // delete mole element from box\n            if (box.hasChildNodes(mole)) {\n              box.removeChild(mole);\n            }\n            combo = 0;\n            showCombo.innerHTML = combo;\n          }\n        }, 80);\n      }, 1000);\n    } else if (mole.who === 'f') {\n      downIndex = 2;\n      await whack(mole);\n      mole.out = setTimeout(function () {\n        downTimer = setInterval(function () {\n          mole.src = \"img/f\" + downIndex + \".png\";\n          downIndex--;\n          if (downIndex < 0) {\n            clearInterval(downTimer);\n            clearInterval(mole.out);\n            // delete mole element from box\n            box.removeChild(mole);\n          }\n        }, 80);\n      }, 1000);\n    } else if (mole.who === 's') {\n      downIndex = 1;\n      await whack(mole);\n      mole.out = setTimeout(function () {\n        downTimer = setInterval(function () {\n          mole.src = \"img/s4.png\";\n          downIndex--;\n          // snake bite sound\n          const snakeSound = new Audio(\"audio/snake-attack.mp3\");\n          snakeSound.play();\n          if (downIndex < 0) {\n            HPboxWidth -= 68;\n            HPbox.style.width = HPboxWidth + 'px';\n            clearInterval(downTimer);\n            clearInterval(mole.out);\n            // delete mole element from box\n            box.removeChild(mole);\n            combo = 0;\n            showCombo.innerHTML = combo;\n          }\n        }, 200);\n      }, 1000);\n    }\n  }\n\n  // gennerate many moles\n  async function showMole() {\n    moleTimer = setInterval(async function () {\n      await addMole();\n    }, 1000);\n  }\n  // 8. whack a mole\n  async function whack(mole) {\n    mole.onclick = async function () {\n      // close downTimer before whacking\n      clearInterval(mole.out);\n      clearInterval(downTimer);\n      await whackAnimation(mole);\n      if (mole.who === 'm') {\n        combo += 1;\n        switch (mole.mineIndex) {\n          case 0:\n            iron += 1;\n            showIron.innerHTML = iron;\n            currentScore += 5 * (1 + Math.floor(combo / 3));\n            break;\n          case 1:\n            copper += 1;\n            showCopper.innerHTML = copper;\n            currentScore += 10 * (1 + Math.floor(combo / 3));\n            break;\n          case 2:\n            ruby += 1;\n            showRuby.innerHTML = ruby;\n            currentScore += 15 * (1 + Math.floor(combo / 3));\n            break;\n          case 3:\n            blackGem += 1;\n            showBlackGem.innerHTML = blackGem;\n            currentScore += 20 * (1 + Math.floor(combo / 3));\n            break;\n          case 4:\n            sapphire += 1;\n            showSapphire.innerHTML = sapphire;\n            currentScore += 25 * (1 + Math.floor(combo / 3));\n            break;\n          case 5:\n            diamond += 1;\n            showDiamond.innerHTML = diamond;\n            currentScore += 30 * (1 + Math.floor(combo / 3));\n            break;\n          case 6:\n            treasure += 1;\n            showTreasure.innerHTML = treasure;\n            currentScore += 40 * (1 + Math.floor(combo / 3));\n            break;\n        }\n      } else if (mole.who === 'f') {\n        currentScore -= 10 * (1 + Math.floor(combo / 3));\n        combo = 0;\n      } else if (mole.who === 's') {\n        combo += 1;\n        currentScore += 5 * (1 + Math.floor(combo / 3));\n      }\n      showCombo.innerHTML = combo;\n      showScore.innerHTML = currentScore;\n      if (combo >= maxCombo) {\n        maxCombo = combo;\n        showMaxCombo.innerHTML = maxCombo;\n      }\n    };\n  }\n  async function whackAnimation(mole) {\n    let hit = document.createElement(\"img\");\n    hit.style.top = sevenMolesPos[mole.holeIndex].top;\n    hit.style.left = sevenMolesPos[mole.holeIndex].left;\n    box.appendChild(hit);\n    let hitIndex = 0;\n    hitTimer = setInterval(function () {\n      hit.src = \"img/w\" + hitIndex + \".png\";\n      hitIndex++;\n      // play whack sound effect \n      if (hasSound && hitIndex === 2 && (mole.who === 'm' || mole.who === 's')) {\n        const hitSound = new Audio(\"audio/whack.mp3\");\n        hitSound.play();\n      } else if (hasSound && hitIndex === 2 && mole.who === 'f') {\n        const hitSound = new Audio(\"audio/wrong-whack.mp3\");\n        hitSound.play();\n      }\n      if (hitIndex > 5) {\n        clearInterval(hitTimer);\n        // clearInterval(mole.out);\n        // clearInterval(downTimer);\n        box.removeChild(hit);\n        if (mole.who === 'm') {\n          mole.hurt = setTimeout(function () {\n            mole.src = \"img/m2.png\";\n            let hurtIndex = 0;\n            hurtTimer = setInterval(function () {\n              mole.src = \"img/m1\" + mole.mineIndex + hurtIndex + \".png\";\n              hurtIndex++;\n              if (hurtIndex > 4) {\n                clearInterval(hurtTimer);\n                clearInterval(mole.hurt);\n                box.removeChild(mole);\n              }\n            }, 100);\n          }, 50);\n        } else if (mole.who === 'f') {\n          let hurtIndex = 0;\n          hurtTimer = setInterval(function () {\n            mole.src = \"img/f3.png\";\n            hurtIndex++;\n            if (hurtIndex > 1) {\n              clearInterval(hurtTimer);\n              box.removeChild(mole);\n            }\n          }, 100);\n        } else if (mole.who === 's') {\n          let hurtIndex = 0;\n          hurtTimer = setInterval(function () {\n            mole.src = \"img/s3.png\";\n            hurtIndex++;\n            if (hurtIndex > 1) {\n              clearInterval(hurtTimer);\n              box.removeChild(mole);\n            }\n          }, 100);\n        }\n      }\n    }, 80);\n  }\n  // restart a new game\n  function restart() {\n    restartButton.onclick = function () {\n      // hide restart button \n      this.style.display = 'none';\n      gameoverBox.style.display = 'none';\n      // refill timer and HP bars\n      timeboxWidth = 202;\n      timebox.style.width = timeboxWidth + 'px';\n      HPboxWidth = 202;\n      HPbox.style.width = timeboxWidth + 'px';\n      currentScore = 0;\n      maxCombo = 0;\n      combo = 0;\n      iron = 0;\n      copper = 0;\n      ruby = 0;\n      blackGem = 0;\n      sapphire = 0;\n      diamond = 0;\n      treasure = 0;\n      showScore.innerHTML = currentScore;\n      showMaxCombo.innerHTML = maxCombo;\n      showCombo.innerHTML = combo;\n      showIron.innerHTML = iron;\n      showCopper.innerHTML = copper;\n      showRuby.innerHTML = ruby;\n      showBlackGem.innerHTML = blackGem;\n      showSapphire.innerHTML = sapphire;\n      showDiamond.innerHTML = diamond;\n      showTreasure.innerHTML = treasure;\n      timeReduce();\n      showMole();\n    };\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93aGFjay1hLW1vbGUvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ (function(module) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; };\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) });\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: true });\n  defineProperty(\n    GeneratorFunctionPrototype,\n    \"constructor\",\n    { value: GeneratorFunction, configurable: true }\n  );\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    defineProperty(this, \"_invoke\", { value: enqueue });\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method;\n    var method = delegate.iterator[methodName];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method, or a missing .next mehtod, always terminate the\n      // yield* loop.\n      context.delegate = null;\n\n      // Note: [\"return\"] must be used for ES3 parsing compatibility.\n      if (methodName === \"throw\" && delegate.iterator[\"return\"]) {\n        // If the delegate iterator has a return method, give it a\n        // chance to clean up.\n        context.method = \"return\";\n        context.arg = undefined;\n        maybeInvokeDelegate(delegate, context);\n\n        if (context.method === \"throw\") {\n          // If maybeInvokeDelegate(context) changed context.method from\n          // \"return\" to \"throw\", let that override the TypeError below.\n          return ContinueSentinel;\n        }\n      }\n      if (methodName !== \"return\") {\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a '\" + methodName + \"' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(val) {\n    var object = Object(val);\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;